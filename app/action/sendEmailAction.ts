"use server";
// import { mailer } from "@/lib/email";
import { sendNotification } from "@/lib/telegram/config";

type BaseFormData = {
  name?: string;
  namePopUp?: string;
  phone?: string;
  phonePopUp?: string;
  services?: string[];
  agreeToPrivacy?: boolean;
};

export const sendForm = async (data: BaseFormData) => {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const isBookingForm = "name" in data;
    const name = isBookingForm ? data.name : data.namePopUp;
    const phone = isBookingForm ? data.phone : data.phonePopUp;
    const services = data.services;
    const subject = isBookingForm
      ? "–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å"
      : "–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é";

    const mailOptions = {
      from: process.env.NEXT_PUBLIC_UKR_NET_EMAIL_USER,
      to: process.env.NEXT_PUBLIC_UKR_NET_EMAIL_USER,
      subject,
      html: `
        <h2>${subject}</h2>
        <p><strong>–Ü–º'—è:</strong> ${name}</p>
        <p><strong>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</strong> ${phone}</p>
        ${
          services
            ? `<p><strong>–û–±—Ä–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏:</strong></p>
        <ul>
          ${services.map((service) => `<li>${service}</li>`).join("")}
        </ul>`
            : ""
        }
      `,
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
    //await mailer.sendMail(mailOptions);

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
    const telegramMessage = isBookingForm
      ? `
üìù –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å

üë§ –Ü–º'—è: ${name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
${services ? `\nüíá‚Äç‚ôÄÔ∏è –û–±—Ä–∞–Ω—ñ –ø–æ—Å–ª—É–≥–∏:\n${services.map((service) => `- ${service}`).join("\n")}` : ""}
    `
      : `
üìû –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é

üë§ –Ü–º'—è: ${name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
    `;

    await sendNotification(telegramMessage);

    return {
      success: true,
      message: isBookingForm
        ? "–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!"
        : "–ó–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!",
    };
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏:", error);
    return {
      success: false,
      message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
    };
  }
};
